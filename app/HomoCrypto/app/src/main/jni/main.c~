

#include <stdlib.h>
#include <stdio.h>

#include "test.h"
#include <stdlib.h>
#include <stdio.h>
#include <time.h>


#include "types.h"

int main(int argc, char **argv){
    //test_suite();
    if(argv[1][0] == 'e'){  //encrypt
        int textLength = strlen(argv[3]);
        
        char publicKeyFileName[50];
        char cipherTextFileName[50];
        char plainText[textLength];
        
        encryptedOperand cipherText;
        cipherText.operand = (mpz_t *)calloc(textLength, sizeof(mpz_t));
        cipherText.length = textLength;
        
        strcpy(publicKeyFileName, argv[2]);
        strcpy(plainText, argv[3]);
        strcpy(cipherTextFileName, argv[4]);
        
        fhe_pk_t pk;
        fhe_pk_init(pk);
        
        fhe_pk_loadkey(pk, publicKeyFileName);
        
        //printf("Size of public key: %lu\n", sizeof(pk));
        
        int i;
        for(i=0; i<textLength; i++){
            mpz_init(cipherText.operand[i]);
        }
        
        fhe_encryptBits(cipherText.operand, textLength, plainText, pk);
        
        FILE * file = fopen(cipherTextFileName, "w");
        
        if(strcmp(cipherTextFileName, "stdout") != 0){
            fprintf(file,"%d\n",cipherText.length);
            for(i=0; i<textLength; i++)
                gmp_fprintf(file,"%Zd\n", cipherText.operand[i]);
            fflush(file);
            fclose(file);
        }
        else{
            fprintf(stdout,"%d\n",cipherText.length);
            for(i=0; i<textLength; i++)
                gmp_fprintf(stdout,"%Zd\n", cipherText.operand[i]);
        }
    }
    else if(argv[1][0] == 'd'){ //decrypt
        char secretKeyFileName[50];
        char tempFileName[50];
        
        strcpy(secretKeyFileName, argv[2]);
        //printf("Secret Key: %s\n", secretKeyFileName);
        strcpy(tempFileName, argv[3]);
        //printf("Temp File: %s\n", tempFileName);
        
        fhe_sk_t sk;
        fhe_sk_init(sk);
        
        fhe_sk_loadkey(sk, secretKeyFileName);
        
        //printf("Size of secret key: %lu\n", sizeof(sk));
        
        char line[16384];
        
        FILE * file = fopen(tempFileName, "r");
        
        int numOfDigits;
        fgets(line, 16384, file);
        numOfDigits = atoi(line);
        //printf("Num of digits: %d\n", numOfDigits);
        
        encryptedOperand plainText;
        plainText.operand = (mpz_t *)calloc(numOfDigits, sizeof(mpz_t));
        plainText.length = numOfDigits;
        
        int i;
        for(i=0; i<numOfDigits; i++){
            fgets(line,16384,file);
            mpz_init(plainText.operand[i]);
            mpz_set_str(plainText.operand[i],line,10);
            //gmp_printf("%Zd\n", plainText.operand[i]);
        }
        fclose(file);
        
        int decryptedText[numOfDigits];
        
        ////////////////////////////////////////////////////////////////////////
        
        clock_t diff = clock();
        
        for(i=0; i<numOfDigits; i++){
            //printf("%d: %d\n", i, fhe_decrypt(plainText.operand[i], sk));
            decryptedText[i] = fhe_decrypt(plainText.operand[i], sk);
        }
        
        diff = clock() - diff;
        
        int msec = diff * 1000 / CLOCKS_PER_SEC;
        
        printf("Time taken to decrypt: %d seconds %d milliseconds.\n", msec/1000, msec%1000);
        
        ////////////////////////////////////////////////////////////////////////
        
        fprintf(stdout, "%d\n", numOfDigits);
        for(i=0; i<numOfDigits; i++){
            //printf("Digit[%d]: %d\n", i, decryptedText[i]);
            fprintf(stdout, "%d\n",decryptedText[i]);
        }
    }
    else if(argv[1][0] == 'g'){ //generate a public/secret key pair        
        char publicKeyFileName[50];
        char secretKeyFileName[50];
        
        strcpy(publicKeyFileName, argv[2]);
        strcpy(secretKeyFileName, argv[3]);
        
        fhe_pk_t pk;
        fhe_sk_t sk;
        fhe_pk_init(pk);
        fhe_sk_init(sk);
        
        //printf("Size of mpz_t: %lu\n", mpz_size(pk->alpha));
        
        ////////////////////////////////////////////////////////////////////////
        
        clock_t diff = clock();
        
        fhe_keygen(pk, sk);
        
        diff = clock() - diff;
        
        int msec = diff * 1000 / CLOCKS_PER_SEC;
        
        //printf("Time taken %d seconds %d milliseconds.\n", msec/1000, msec%1000);
        
        ////////////////////////////////////////////////////////////////////////
        
        fhe_pk_store(pk, publicKeyFileName);
        fhe_sk_store(sk, secretKeyFileName);
    }
    else if(argv[1][0] == 'h'){ // homomorphic operation
        char* inFile = ".process";
        FILE *fp;
        fp = fopen(inFile,"r");
        int numOfOperators, numOfOperands, numOfDigits;

        fscanf(fp, "%d\n", &numOfOperators);
        //printf("%d\n", numOfOperators);
        
        char operators [numOfOperators];
        
        int i,j;
        
        for(i=0; i<numOfOperators; i++){
            fscanf(fp, "%c\n", &operators[i]);
            //printf("%c\n", operators[i]);
        }
        
        fscanf(fp, "%d\n", &numOfOperands);
        //printf("%d\n", numOfOperands);
        
        char line[16384];
        
        encryptedOperand operands[numOfOperands];
        
        for(i=0; i<numOfOperands; i++){
            fscanf(fp, "%d\n", &numOfDigits);
            //printf("%d\n", numOfDigits);
            operands[i].operand = (mpz_t *)calloc(numOfDigits, sizeof(mpz_t));
            operands[i].length = numOfDigits;
            for(j=0; j<numOfDigits; j++){
                fgets(line,16384,fp);
                mpz_set_str(operands[i].operand[j],line,10);
                //gmp_printf("%Zd\n", operands[i].operand[j]);
            }
        }
        fclose(fp);
////////////////////////////////////////////////////////////////////////////////        
        encryptedOperand results[numOfOperators];
        
        fhe_pk_t pk;
        fhe_sk_t sk;
        fhe_pk_init(pk);
        fhe_sk_init(sk);
        
        fhe_pk_loadkey(pk, argv[2]);
        fhe_sk_loadkey(sk, argv[3]);
        
        mpz_t carry;
        mpz_init(carry);
        
        fhe_encrypt(carry, pk, 0);
        
        for(i=0; i<numOfOperators; i++){
            if(operators[i] == '+'){    // Addition
                if(i == 0){
                    int resultLength = operands[i].length;
                    int operand1Length = operands[i].length;
                    int operand2Length = operands[i+1].length;
                    if(operands[i+1].length > resultLength)
                        resultLength = operands[i+1].length;
                    resultLength++; // for carry
                    results[i].operand = (mpz_t *)calloc(resultLength, sizeof(mpz_t));
                    results[i].length = resultLength;
                    fhe_encrypt(results[i].operand[0], pk, 0);
                    
                    if(operand1Length >= operand2Length)
                        fhe_addBits(carry, &results[i], &operands[i], &operands[i+1], pk, sk);
                    else
                        fhe_addBits(carry, &results[i], &operands[i+1], &operands[i], pk, sk);
                    
                    mpz_init(carry);
                }
                else{
                    int resultLength = results[i-1].length;
                    int operand1Length = results[i-1].length;
                    int operand2Length = operands[i+1].length;
                    if(operands[i+1].length > resultLength)
                        resultLength = operands[i+1].length;
                    resultLength++;
                    results[i].operand = (mpz_t *)calloc(resultLength, sizeof(mpz_t));
                    results[i].length = resultLength;
                    fhe_encrypt(results[i].operand[0], pk, 0);
                    
                    if(operand1Length >= operand2Length)
                        fhe_addBits(carry, &results[i], &results[i-1], &operands[i+1], pk, sk);
                    else
                        fhe_addBits(carry, &results[i], &operands[i+1], &results[i-1], pk, sk);
                    
                    mpz_init(carry);
                }
            }
            else if(operators[i] == 'x'){   // Multiplication
                if(i==0){
                    int operand1Length = operands[i].length;
                    int operand2Length = operands[i+1].length;
                    int resultLength = operand1Length + operand2Length + 1;
                    
                    results[i].operand = (mpz_t *)calloc(resultLength, sizeof(mpz_t));
                    results[i].length = resultLength;
                    for(j=0; j<resultLength; j++)
                        mpz_init(results[i].operand[j]);
                    fhe_encrypt(results[i].operand[0], pk, 0);
                    
                    if(operand1Length >= operand2Length)
                        fhe_multBits(carry, &results[i], &operands[i], &operands[i+1], pk, sk);
                    else
                        fhe_multBits(carry, &results[i], &operands[i+1], &operands[i], pk, sk);
                    
                    mpz_init(carry);
                }
                else{
                    int operand1Length = results[i-1].length;
                    int operand2Length = operands[i+1].length;
                    int resultLength = operand1Length + operand2Length + 1;
                    
                    results[i].operand = (mpz_t *)calloc(resultLength, sizeof(mpz_t));
                    results[i].length = resultLength;
                    for(j=0; j<resultLength; j++)
                        mpz_init(results[i].operand[j]);
                    fhe_encrypt(results[i].operand[0], pk, 0);
                    
                    if(operand1Length >= operand2Length)
                        fhe_multBits(carry, &results[i], &results[i-1], &operands[i+1], pk, sk);
                    else
                        fhe_multBits(carry, &results[i], &operands[i+1], &results[i-1], pk, sk);
                    
                    mpz_init(carry);
                }
            }
        }
                        
        fprintf(stdout, "%d\n", results[i-1].length);
        
        for(j=0; j<results[i-1].length; j++)
            gmp_fprintf(stdout, "%Zd\n", results[i-1].operand[j]);
    }
    else{   
        int operatorNum = (int)(argv[1][0] - '0');
        int operandNum = operatorNum+1;
        
        char * operands[operandNum];
        char operators[operatorNum];
        
        fhe_pk_t pk;
        fhe_sk_t sk;
        fhe_pk_init(pk);
        fhe_sk_init(sk);

        fhe_keygen(pk, sk);
        
        mpz_t carry;
        mpz_init(carry);
        fhe_encrypt(carry, pk, 0);
        
        encryptedOperand encryptedOperands[operandNum];
        
        int i, j, k, operatorIndex, operandIndex, operandLength;
        for(i=0, operatorIndex=3; i<operatorNum; i++, operatorIndex+=2){
            operators[i] = argv[operatorIndex][0];
            //printf("Operator #%d = %c\n", (i+1), operators[i]);
        }
        
        for(j=0, operandIndex=2; j<operandNum; j++, operandIndex+=2){
            operandLength = strlen(argv[operandIndex]);
            operands[j] = (char *)calloc(operandLength, sizeof(char));
            encryptedOperands[j].operand = (mpz_t *)calloc(operandLength, sizeof(mpz_t));
            encryptedOperands[j].length = operandLength;
            
            strcpy(operands[j], argv[operandIndex]);
            
            for(k=0; k<operandLength; k++)
                mpz_init(encryptedOperands[j].operand[k]);
            fhe_encryptBits(encryptedOperands[j].operand, operandLength, operands[j], pk);
            //printf("Operand #%d = %s\n", (j+1), operands[j]);
        }
        
        encryptedOperand results[operatorNum];
        
        clock_t diff = clock();
        
        for(i=0; i<operatorNum; i++){
            if(operators[i] == '+'){    // Addition
                if(i == 0){
                    int resultLength = encryptedOperands[i].length;
                    int operand1Length = encryptedOperands[i].length;
                    int operand2Length = encryptedOperands[i+1].length;
                    if(encryptedOperands[i+1].length > resultLength)
                        resultLength = encryptedOperands[i+1].length;
                    resultLength++; // for carry
                    results[i].operand = (mpz_t *)calloc(resultLength, sizeof(mpz_t));
                    results[i].length = resultLength;
                    fhe_encrypt(results[i].operand[0], pk, 0);
                    
                    if(operand1Length >= operand2Length)
                        fhe_addBits(carry, &results[i], &encryptedOperands[i], &encryptedOperands[i+1], pk, sk);
                    else
                        fhe_addBits(carry, &results[i], &encryptedOperands[i+1], &encryptedOperands[i], pk, sk);
                    
                    mpz_init(carry);
                    /*for(j=0; j<resultLength; j++)
                        printf("%d", fhe_decrypt(results[i].operand[j], sk));
                    printf("\n");*/
                }
                else{
                    int resultLength = results[i-1].length;
                    int operand1Length = results[i-1].length;
                    int operand2Length = encryptedOperands[i+1].length;
                    if(encryptedOperands[i+1].length > resultLength)
                        resultLength = encryptedOperands[i+1].length;
                    resultLength++;
                    results[i].operand = (mpz_t *)calloc(resultLength, sizeof(mpz_t));
                    results[i].length = resultLength;
                    fhe_encrypt(results[i].operand[0], pk, 0);
                    
                    if(operand1Length >= operand2Length)
                        fhe_addBits(carry, &results[i], &results[i-1], &encryptedOperands[i+1], pk, sk);
                    else
                        fhe_addBits(carry, &results[i], &encryptedOperands[i+1], &results[i-1], pk, sk);
                    
                    mpz_init(carry);
                    
                    /*for(j=0; j<resultLength; j++)
                        printf("%d", fhe_decrypt(results[i].operand[j], sk));
                    printf("\n");*/
                }
            }
            else if(operators[i] == 'x'){   // Multiplication
                if(i==0){
                    int operand1Length = encryptedOperands[i].length;
                    int operand2Length = encryptedOperands[i+1].length;
                    int resultLength = operand1Length + operand2Length + 1;
                    
                    results[i].operand = (mpz_t *)calloc(resultLength, sizeof(mpz_t));
                    results[i].length = resultLength;
                    for(j=0; j<resultLength; j++)
                        mpz_init(results[i].operand[j]);
                    fhe_encrypt(results[i].operand[0], pk, 0);
                    
                    if(operand1Length >= operand2Length)
                        fhe_multBits(carry, &results[i], &encryptedOperands[i], &encryptedOperands[i+1], pk, sk);
                    else
                        fhe_multBits(carry, &results[i], &encryptedOperands[i+1], &encryptedOperands[i], pk, sk);
                    
                    mpz_init(carry);
                    
                    /*for(j=0; j<resultLength; j++)
                        printf("%d", fhe_decrypt(results[i].operand[j], sk));
                    printf("\n");*/
                }
                else{
                    int operand1Length = results[i-1].length;
                    int operand2Length = encryptedOperands[i+1].length;
                    int resultLength = operand1Length + operand2Length + 1;
                    
                    /*printf("Operand 1 -> ");
                    for(j=0; j<operand1Length; j++)
                        printf("%d", fhe_decrypt(results[i-1].operand[j], sk));
                    printf("\n\n");
                    
                    printf("Operand 2 -> ");
                    for(j=0; j<operand2Length; j++)
                        printf("%d", fhe_decrypt(encryptedOperands[i+1].operand[j], sk));
                    printf("\n\n");*/
                    
                    results[i].operand = (mpz_t *)calloc(resultLength, sizeof(mpz_t));
                    results[i].length = resultLength;
                    for(j=0; j<resultLength; j++)
                        mpz_init(results[i].operand[j]);
                    fhe_encrypt(results[i].operand[0], pk, 0);
                    
                    if(operand1Length >= operand2Length)
                        fhe_multBits(carry, &results[i], &results[i-1], &encryptedOperands[i+1], pk, sk);
                    else
                        fhe_multBits(carry, &results[i], &encryptedOperands[i+1], &results[i-1], pk, sk);
                    
                    mpz_init(carry);
                    
                    /*for(j=0; j<resultLength; j++)
                        printf("%d", fhe_decrypt(results[i].operand[j], sk));
                    printf("\n");*/
                }
            }
        }
        
        diff = clock() - diff;
        
        int msec = diff * 1000 / CLOCKS_PER_SEC;
        
        printf("Time taken to process: %d seconds %d milliseconds.\n", msec/1000, msec%1000);
        
        //printf("%d\n", results[i-1].length);
        
        for(j=0; j<results[i-1].length; j++)
            //gmp_printf("%Zd\n", results[i-1].operand[j]);
        
        for(j=0; j<results[i-1].length; j++)
            printf("%d", fhe_decrypt(results[i-1].operand[j], sk));
        printf("\n");
        
    }    
    exit(0);
}


